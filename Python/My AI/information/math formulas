import math

""" dimensions """

def circumference(radius):
    return 2 * 3.14 * radius
    
def area_square(length):
    return length**2
    
def area_rectangle(length, width):
    return length * width
    
def area_triangle(base, height):
    return (base * height) / 2

def area_rhombus(Diagonal, diagonal):
    return (Diagonal * diagonal) / 2

def area_trapezoid(large_side, small_side, height):
    return (large_side + small_side) /2 * height
    
def area_regular_polygon(perimeter, apothem):
    return perimeter/2 * apothem
  
def area_circle(radius):
    return 3.14 * (radius**2)
    
def area_cone(radius, slant_height):
    return 3.14 * radius * slant_height
    
def area_sphere(radius):
    return 4 * 3.14 * radius**2    

def volume_cube(length):
    return length**3

def volume_rectangular_prism(length, width, height):
    return length * width * height
    
def volume_triangular_prism(base, height):
    return base * height   

def volume_cylinder(radius, height):
    return 3.14 * radius**2 * height

def volume_cone(base, height):
    return base/3 * height   

def volume_sphere(radius):
    return (4/3) * 3.14 * radius**3

""" algebra """

def quadratic_formula(a,b,c):
    x1 = (-b + (b**2 - 4*a*c)**0.5) / 2*a
    x2 = (-b - (b**2 - 4*a*c)**0.5) / 2*a
    return x1, x2

def foil(a,b,c,d):
    return a*c + a*d + b*c + b*d

def difference_two_squares(a,b):
    return a**2 - b**2

def perfect_square(a,b):
    return a**2 + 2*a*b + b**2

""" physics """

def velocity(distance, time):
    return distance/2

def acceleration(velocity1,velocity2, time1,time2):
    return (velocity2 - velocity1) / (time2 - time1)

def centripetal_acceleration(velocity, radius):
    return velocity**2 / radius

def density(mass, volume):
    return mass / volume

def pressure(force, area):
    return force/area

def newtown_second_law(mass, acceleration):
    return mass * acceleration

def momentum(mass, velocity):
    return mass * velocity

def impulse(force, time):
    return force * time

def impulse_momentum(mass, velocity1, velocity2):
    return mass * velocity2 - mass * velocity1

def angular_velocity(position_angle, time):
    return position_angle/time

def rotational_power(torque, angular_velocity):
    return torque * angular_velocity

def kinetic_energy(mass, velocity):
    return 0.5 * mass * velocity**2

def work(force, distance, angle=0):
    return force * distance * math.cos(angle)

def power(force, distance, time, angle=0):
    return (force * distance) * angle / time

def torque(force, radius, angle=0):
    return force * radius * math.sin(angle)

def tension(mass, gravity):
    return mass * gravity

def mass_flow_rate(mass, time):
    return mass/time

def kinematic_viscosity(viscosity, density):
    return viscosity/density

def spring_constant(force, displacement):
    return -force/displacement
    
def spring_potential_energy(force, displacement):
    return (-force/displacement)/2 * displacement**2

def strain_energy(compression):
    return compression / 2

def surface_tension(force, length):
    return force/length

def pendulum_formula(pendulum_length):
    return 2 * 3.14 * (pendulum_length/9.8)

def friction_force(coefficient_of_friction, force):
    return coefficient_of_friction * force

def bulk_modulus(pressure, original_volume, new_volume):
    return pressure / ((original_volume - new_volume)/original_volume)

def youngs_modulus(force, area, original_length, new_length):
    return (force * original_length) / (area * (new_length - original_length))

def shear_modulus(force,area,initial_length, displacement):
    return (force/area) / (displacement/initial_length)

def gravitational_force(mass1, mass2, distance):
    return (6.67*10**-11) * (mass1 * mass2)/distance**2

def celsius_to_fahrenheit(celsius):
    return (9/5 * celsius) + 32

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * (5/9)

def water_pressure(density, depth):
    return density * 9.81 * depth

def liquid_expansion(beta_expansion_coefficient, original_volume, time_change):
    return beta_expansion_coefficient * original_volume * time_change

def froude_number(water_velocity, hydraulic_depth):
    return water_velocity / (9.8 * hydraulic_depth)**0.5

def potential_energy(mass, height):
    return mass * 9.81 * height

def sensible_heat(mass, specific_heat_capacity, temperature_change):
    return mass * specific_heat_capacity * temperature_change

def molarity(solute_moles,solution_liters):
    return solute_moles/solution_liters

def molality(solute_moles, solvent_kilograms):
    return solute_moles/solvent_kilograms

def lorentz_factor(velocity):
    return 1 / (1 - (velocity**2 / 29792458**2)**0.5)

def mass_energy_equivalence(mass):
    return mass * 29792458

""" optics https://www.newport.com/n/optics-formulas """

def magnification(image_size, actual_size):
    return image_size/actual_size

def lens_formula(object_distance, image_distance):
    return 1 / (1/object_distance + 1/image_distance)

""" electricity """

def ohms_law(amplitude, resistance):
    return amplitude * resistance

def coulombs_law(q1,q2,distance):
    return (8.99 * (10**9)) * ((abs(q1 * q2))/distance**2)

def capacitance(charge, potential_difference):
    return charge/potential_difference
    
def current_density(current, area):
    return current/area

def faraday_induction(change_magnetic_flux, change_time):
    return change_magnetic_flux / change_time
    
def magnetic_flux(magnetic_field, area_perpendicular, angle = 0):
    return magnetic_field * area_perpendicular * angle
